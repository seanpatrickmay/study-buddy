"""Shared data models used across Study Buddy services."""
from __future__ import annotations

from dataclasses import dataclass, field
from pathlib import Path
from typing import Dict, List, Optional


@dataclass(slots=True)
class DocumentBundle:
    """Normalized representation of an ingested learning resource."""

    source_path: Path
    display_name: str
    markdown: str
    metadata: Dict[str, str] = field(default_factory=dict)

    @property
    def char_count(self) -> int:
        """Return the number of characters in the markdown payload."""
        return len(self.markdown)


@dataclass(slots=True)
class Flashcard:
    """Lightweight structure describing a single flashcard."""

    front: str
    back: str
    tags: List[str] = field(default_factory=list)
    identifier: Optional[str] = None
    difficulty: Optional[float] = None


@dataclass(slots=True)
class WorkflowArtifacts:
    """Paths to artefacts generated by the study workflow."""

    flashcards_json: Optional[Path] = None
    anki_package: Optional[Path] = None
    cheat_sheet: Optional[Path] = None
    cheat_sheet_pdf: Optional[Path] = None
    summary_markdown: Optional[Path] = None

    def as_download_dict(self) -> Dict[str, str]:
        """Return a mapping of artefact names to stringified paths suitable for JSON."""
        mapping: Dict[str, Path] = {
            "flashcards": self.flashcards_json,
            "anki_package": self.anki_package,
            "cheat_sheet": self.cheat_sheet,
            "cheat_sheet_pdf": self.cheat_sheet_pdf,
            "summary_markdown": self.summary_markdown,
        }
        return {name: str(path) for name, path in mapping.items() if path}
